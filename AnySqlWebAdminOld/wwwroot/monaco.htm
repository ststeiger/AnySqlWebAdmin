<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <meta charset="utf-8" />
    
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />
    
    <title>Monaco Editor test</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />
    
    <style type="text/css">
        
        html, body
        {
            margin: 0px; padding: 0px;
            width: 100%; height: 100%;
        }
        
    </style>
    
    <script src="js/monaco-editor/min/vs/loader.js"></script>
</head>
<body>

    <div id="container" style="width:800px;height:600px;border:1px solid grey"></div>
    <input type="button" onclick="alert(window.editor.getValue());" value="Get Text" />
    <input type="button" onclick="window.editor.setValue('SELECT * FROM T_Benutzer');" value="Set Text" />
    <input type="button" onclick="alert(window.editor.getModel().getValueInRange(window.editor.getSelection()));" value="Get Selection" />
    
    
    <script type="text/javascript">
        
        // Addds content changed listener to `editor` and invokes `callback` with all change events.
        function onDidChangeModelContentBulk(editor, callback) {
            return editor.getModel().addBulkListener(function(events) {
                contentChangeEvents = events.filter(function(e) {
                    // console.log(e); // contentChanged, rawContentChanged2
                    return e.type === 'rawContentChanged2';
                }).map(function(e) {
                    // console.log(e.data);
                    return e.data; //return e.getData();
                });
                if (contentChangeEvents.length > 0) {
                    callback(editor, contentChangeEvents);
                }
            });
        }


        // console.log(require);
        require.config({ paths: { 'vs': 'js/monaco-editor/min/vs' } });
        require(['vs/editor/editor.main'], function ()
        {
            window.editor = monaco.editor.create(document.getElementById('container'), {
                value: [
                    /*
                    'function x() {',
                    '\tconsole.log("Hello world!");',
                    '}'
                    */
                    "SELECT * FROM T_Benutzer "
                    ,"WHERE BE_User = 'administrator' "
                    
                    ].join('\n'),
                // https://github.com/Microsoft/monaco-languages
                // https://github.com/Microsoft/monaco-editor
                // https://microsoft.github.io/monaco-editor/playground.html
                //language: 'javascript'
                language: 'sql'
                //language: 'markdown'
            });
            
            
            // https://github.com/Microsoft/monaco-editor/issues/341
            onDidChangeModelContentBulk(window.editor, function (editor, e)
            {
                // console.log("change", arguments);
                console.log(editor.getValue());
            });
            
            
            console.log("cursor position: ", window.editor.getPosition());
            console.log("set position: ", window.editor.setPosition({lineNumber: 2, column: 14}));
            // https://github.com/Microsoft/monaco-editor/issues/194
            // if (window.editor.isFocused())
                window.editor.focus();
        });
    </script>
    
    
    <script type="text/javascript">
        
        function onDomReady()
        {
            console.log("dom ready");
        }
        if (document.addEventListener) document.addEventListener("DOMContentLoaded", onDomReady, false);
        else if (document.attachEvent) document.attachEvent("onreadystatechange", onDomReady);
        else window.onload = onDomReady;
        
        function onPageLoaded()
        {
            console.log("page loaded");
        }
        if (window.addEventListener) window.addEventListener("load", onPageLoaded, false);
        else if (window.attachEvent) window.attachEvent("onload", onPageLoaded);
        else window.onload = onPageLoaded;
    </script>
    
</body>
</html>
